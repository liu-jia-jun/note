package code;

/**
 * @author 刘佳俊
 *
 *
 *  2 的幂 :
 *      给你一个整数 n，请你判断该整数是否是 2 的幂次方。如果是，返回 true ；否则，返回 false 。
 *      如果存在一个整数 x 使得 n == 2x ，则认为 n 是 2 的幂次方。
 *
 *
 *  思路:
 *      1. 使用位运算
 *
 *      2. 注意如果一个数是 2 的幂次方,那么这个数的二进制的首位为1其他的位上的数字为0
 *      3. 我们可以获取这个数的最右边的1 和原数 n 进行比较, 如果相等就证明 这个数的最右边的1 在其首位,
 *
 *      eg:  当 n = 8 二进制  1000 首位为1 且最右边的1 表示为 1000  最右边的1和原数相等
 *           当 n = 5 二进制  0110 首位不为1  最右边的1 表示为  10  与原数不等
 *
 *           注意 我们这里的 int n 表示的都是32位二进制数
 *
 *
 *      方法技巧: 获取一个数二进制的最右位的1
 *              n & (~n + 1)
 *
 *              n               二进制
 *
 *              5               0110
 *              ~5              1001
 *              ~5 +1           1010
 *              5 & (~5 +1)     0010
 *
 *              n = 0110
 *              n & (~n + 1) = 0010
 *
 *
 */
public class _231_IsPowerOfTwo {
    public boolean isPowerOfTwo(int n) {
        // 因为这里的数均为整数所以小于等于0的都不是
        if (n <= 0) {
            return false;
        }

        // 一个数与上 这个数取反加一 可以得出  这个数最右边1的数
        int temp = n & (~n + 1);
        if (temp == n) {
            return true;
        }
        return false;
    }
}
